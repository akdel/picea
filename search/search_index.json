{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"picea Lightweight python library for working with trees and sequence collections pip install picea The above figure can be generated with the following code from picea import Tree import matplotlib.pyplot as plt newick = '(((a,b),(c,d)),e)' tree = Tree . from_newick ( newick ) fig , ( ax1 , ax2 ) = plt . subplots ( ncols = 2 , figsize = ( 10 , 4 )) #left-to-right layout with direct links tree . layout ( ltr = True ) for node1 , node2 in tree . links : ax1 . plot ( ( node1 . x , node2 . x ), ( node1 . y , node2 . y ), c = 'k' ) for leaf in tree . leaves : ax1 . text ( leaf . x + . 1 , leaf . y - . 1 , leaf . name , fontsize = 18 ) #right-to-left layout with square links tree . layout ( ltr = False ) for node1 , node2 in tree . links : ax2 . plot ( ( node1 . x , node1 . x ), ( node1 . y , node2 . y ) ) ax2 . plot ( ( node1 . x , node2 . x ), ( node2 . y , node2 . y ) ) #clean up plots ax1 . set_xlim (( -. 5 , 3.5 )) ax2 . set_xlim (( - 3.5 , . 5 )) for ax in ( ax1 , ax2 ): ax . set_xticks ([],[]) ax . set_yticks ([],[])","title":"_picea_"},{"location":"#picea","text":"","title":"picea"},{"location":"#lightweight-python-library-for-working-with-trees-and-sequence-collections","text":"pip install picea The above figure can be generated with the following code from picea import Tree import matplotlib.pyplot as plt newick = '(((a,b),(c,d)),e)' tree = Tree . from_newick ( newick ) fig , ( ax1 , ax2 ) = plt . subplots ( ncols = 2 , figsize = ( 10 , 4 )) #left-to-right layout with direct links tree . layout ( ltr = True ) for node1 , node2 in tree . links : ax1 . plot ( ( node1 . x , node2 . x ), ( node1 . y , node2 . y ), c = 'k' ) for leaf in tree . leaves : ax1 . text ( leaf . x + . 1 , leaf . y - . 1 , leaf . name , fontsize = 18 ) #right-to-left layout with square links tree . layout ( ltr = False ) for node1 , node2 in tree . links : ax2 . plot ( ( node1 . x , node1 . x ), ( node1 . y , node2 . y ) ) ax2 . plot ( ( node1 . x , node2 . x ), ( node2 . y , node2 . y ) ) #clean up plots ax1 . set_xlim (( -. 5 , 3.5 )) ax2 . set_xlim (( - 3.5 , . 5 )) for ax in ( ax1 , ax2 ): ax . set_xticks ([],[]) ax . set_yticks ([],[])","title":"Lightweight python library for working with trees and sequence collections"},{"location":"API/sequence/","text":"Sequence containers abstract class picea.sequence. SequenceCollection ( sequences=None , sequence_annotation=None ) (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes headers \u2014 List of sequences headers. Overridden in subclasses. n_seqs \u2014 Return the number of sequences in the collection. Overridden in subclasses sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Parameters filename (str, optional) \u2014 string (str, optional) \u2014 Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Parameters filename (str, optional) \u2014 string (str, optional) \u2014 Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Parameters indent (int, optional) \u2014 Returns (str) [description] class picea.sequence. SequenceList ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of (str, str), optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes sequences \u2014 List of sequences without headers Methods align ( method , method_kwargs ) ([type]) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] class picea.sequence. MultipleSequenceAlignment ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods __delitem__ ( header ) \u2014 WIP! from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method __delitem__ ( header ) WIP! Parameters header (str) \u2014 [description] class picea.sequence. SequenceAnnotation ( sequence_collection=None ) [summary] Parameters sequence_collection (Optional['SequenceCollection']) \u2014 [description]. Defaults to None. Methods from_gff ( filename , string , sequence_collection ) ([type]) \u2014 [summary] from_json ( filename , string , sequence_collection ) (SequenceAnnotation) \u2014 [summary] to_gff ( ) (str) \u2014 [summary] to_json ( indent ) (str) \u2014 [summary] classmethod from_gff ( filename=None , string=None , sequence_collection=None ) [summary] Parameters filename ([type], optional) \u2014 [description]. Defaults to None. string ([type], optional) \u2014 [description]. Defaults to None. sequence_collection ([type], optional) \u2014 [description]. Defaults to None. Returns ([type]) [description] method to_gff ( ) [summary] Returns (str) [description] classmethod from_json ( filename=None , string=None , sequence_collection=None ) \u2192 SequenceAnnotation [summary] method to_json ( indent=None ) [summary] Returns (str) [description]","title":"Sequence containers"},{"location":"API/sequence/#sequence-containers","text":"abstract class picea.sequence. SequenceCollection ( sequences=None , sequence_annotation=None ) (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes headers \u2014 List of sequences headers. Overridden in subclasses. n_seqs \u2014 Return the number of sequences in the collection. Overridden in subclasses sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Parameters filename (str, optional) \u2014 string (str, optional) \u2014 Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Parameters filename (str, optional) \u2014 string (str, optional) \u2014 Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Parameters indent (int, optional) \u2014 Returns (str) [description] class picea.sequence. SequenceList ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection A container for multiple (unaligned) DNA or amino acid sequences Parameters sequences (iterable of (str, str), optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (SequenceAnnotation, optional) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes sequences \u2014 List of sequences without headers Methods align ( method , method_kwargs ) ([type]) \u2014 [summary] from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method align ( method='mafft' , method_kwargs={} ) [summary] Parameters method (str, optional) \u2014 [description]. Defaults to 'mafft'. method_kwargs (Dict[str, str], optional) \u2014 [description]. Defaults to dict(). Returns ([type]) [description] class picea.sequence. MultipleSequenceAlignment ( sequences=None , sequence_annotation=None ) Bases picea.sequence.SequenceCollection (Partially) Abstract Base Class for sequence collections. Classes extending from this baseclass should override __setitem__ , __getitem__ , __delitem__ , headers , and n_seqs . If the above methods are implemented, this automatically enables the following methods: from_fasta , to_fasta , from_json , to_json . Parameters sequences (Optional[Iterable[Tuple[str, str]]], optional) \u2014 Iterable of (header, sequence) tuples. Defaults to None. sequence_annotation (Optional[SequenceAnnotation]) \u2014 picea SequenceAnnotation object. Defaults to None. Attributes sequences \u2014 List of sequences without headers Raises NotImplementedError \u2014 Abstract Base Class can not be initialized and serves as a template only Methods __delitem__ ( header ) \u2014 WIP! from_fasta ( filename , string ) (SequenceCollection) \u2014 Parse a fasta formatted string into a SequenceCollection object from_json ( filename , string ) (SequenceCollection) \u2014 [summary] to_fasta ( ) (str) \u2014 Get a fasta-formatted string of the sequence collection to_json ( indent ) (str) \u2014 [summary] classmethod from_fasta ( filename=None , string=None ) Parse a fasta formatted string into a SequenceCollection object Keyword Arguments: filename {String} -- filename string (default: {None}) string {String} -- fasta formatted string (default: {None}) Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_fasta ( ) Get a fasta-formatted string of the sequence collection Returns (str) Multi-line fasta-formatted string classmethod from_json ( filename=None , string=None ) [summary] Keyword Arguments: string {String} -- JSON formatted string Returns (SequenceCollection) SequenceCollection -- SequenceCollection instance method to_json ( indent=None ) [summary] Returns (str) [description] method __delitem__ ( header ) WIP! Parameters header (str) \u2014 [description] class picea.sequence. SequenceAnnotation ( sequence_collection=None ) [summary] Parameters sequence_collection (Optional['SequenceCollection']) \u2014 [description]. Defaults to None. Methods from_gff ( filename , string , sequence_collection ) ([type]) \u2014 [summary] from_json ( filename , string , sequence_collection ) (SequenceAnnotation) \u2014 [summary] to_gff ( ) (str) \u2014 [summary] to_json ( indent ) (str) \u2014 [summary] classmethod from_gff ( filename=None , string=None , sequence_collection=None ) [summary] Parameters filename ([type], optional) \u2014 [description]. Defaults to None. string ([type], optional) \u2014 [description]. Defaults to None. sequence_collection ([type], optional) \u2014 [description]. Defaults to None. Returns ([type]) [description] method to_gff ( ) [summary] Returns (str) [description] classmethod from_json ( filename=None , string=None , sequence_collection=None ) \u2192 SequenceAnnotation [summary] method to_json ( indent=None ) [summary] Returns (str) [description]","title":"Sequence containers"},{"location":"API/tree/","text":"Tree containers class picea.tree. Tree ( ID=None , children=None , name='' , length=0.0 , depth=None , parent=None , cumulative_length=0.0 ) Recursive datastructure holding tree objects Parameters ID (int, optional) \u2014 [description]. Defaults to None. children (list, optional) \u2014 [description]. Defaults to None. name (str, optional) \u2014 [description]. Defaults to ''. length (float, optional) \u2014 [description]. Defaults to 0. depth (float, optional) \u2014 [description]. Defaults to None. parent (Tree, optional) \u2014 [description]. Defaults to None. cumulative_length (int, optional) \u2014 [description]. Defaults to 0. x (float, optional) \u2014 [description]. Defaults to 0.0. y (float, optional) \u2014 [description]. Defaults to 0.0. Attributes iloc \u2014 Index based index leaves \u2014 A list of leaf nodes only links \u2014 A list of all (parent, child) combinations loc \u2014 Name based index nodes \u2014 A list of all tree nodes in breadth-first order Methods breadth_first ( ) \u2014 Generator implementing breadth first search starting at root node depth_first ( post_order ) \u2014 Generator implementing depth first search in either post- or pre-order traversel from_newick ( string , filename ) (Tree) \u2014 Parse a newick formatted string into a Tree object from_sklearn ( clustering ) (Tree) \u2014 Read a tree from sklearn agglomerative clustering layout ( separation , d_x , d_y , ltr ) (Tree) \u2014 Calculate (x,y) position of nodes for plotting, modifies nodes in place to_newick ( branch_lengths ) (String) \u2014 Make a Newick formatted string classmethod from_newick ( string=None , filename=None ) Parse a newick formatted string into a Tree object Parameters newick_string (string) \u2014 Newick formatted tree string Returns (Tree) Tree object method to_newick ( branch_lengths=True ) Make a Newick formatted string Parameters branch_lengths (bool, optional) \u2014 Whether to include branch lengths in the Newick string. Defaults to True. Returns (String) Newick formatted tree string classmethod from_sklearn ( clustering ) Read a tree from sklearn agglomerative clustering Parameters clustering (sklearn object) \u2014 sklearn agglomerative clustering object. Returns (Tree) Tree object generator breadth_first ( ) Generator implementing breadth first search starting at root node generator depth_first ( post_order=True ) Generator implementing depth first search in either post- or pre-order traversel Keyword Arguments: post_order (bool, optional): Depth first search in post-order traversal or not. Defaults to True method layout ( separation=<function equal_separation at 0x1a1d7100e0> , d_x=1.0 , d_y=1.0 , ltr=True ) Calculate (x,y) position of nodes for plotting, modifies nodes in place Parameters separation (function, optional) \u2014 function to calculate separation between leaf nodes. Defaults to equal_separation. d_x (int, optional) \u2014 x-axis distance between neighbouring nodes. Defaults to 1. d_y (int, optional) \u2014 y-axis distance between neighbouring nodes. ltr (bool, optional) \u2014 Left-To-Right layout orientation. Defaults Returns (Tree) Original root node with modified (x,y) coordinates according to specified layout properties","title":"Tree containers"},{"location":"API/tree/#tree-containers","text":"class picea.tree. Tree ( ID=None , children=None , name='' , length=0.0 , depth=None , parent=None , cumulative_length=0.0 ) Recursive datastructure holding tree objects Parameters ID (int, optional) \u2014 [description]. Defaults to None. children (list, optional) \u2014 [description]. Defaults to None. name (str, optional) \u2014 [description]. Defaults to ''. length (float, optional) \u2014 [description]. Defaults to 0. depth (float, optional) \u2014 [description]. Defaults to None. parent (Tree, optional) \u2014 [description]. Defaults to None. cumulative_length (int, optional) \u2014 [description]. Defaults to 0. x (float, optional) \u2014 [description]. Defaults to 0.0. y (float, optional) \u2014 [description]. Defaults to 0.0. Attributes iloc \u2014 Index based index leaves \u2014 A list of leaf nodes only links \u2014 A list of all (parent, child) combinations loc \u2014 Name based index nodes \u2014 A list of all tree nodes in breadth-first order Methods breadth_first ( ) \u2014 Generator implementing breadth first search starting at root node depth_first ( post_order ) \u2014 Generator implementing depth first search in either post- or pre-order traversel from_newick ( string , filename ) (Tree) \u2014 Parse a newick formatted string into a Tree object from_sklearn ( clustering ) (Tree) \u2014 Read a tree from sklearn agglomerative clustering layout ( separation , d_x , d_y , ltr ) (Tree) \u2014 Calculate (x,y) position of nodes for plotting, modifies nodes in place to_newick ( branch_lengths ) (String) \u2014 Make a Newick formatted string classmethod from_newick ( string=None , filename=None ) Parse a newick formatted string into a Tree object Parameters newick_string (string) \u2014 Newick formatted tree string Returns (Tree) Tree object method to_newick ( branch_lengths=True ) Make a Newick formatted string Parameters branch_lengths (bool, optional) \u2014 Whether to include branch lengths in the Newick string. Defaults to True. Returns (String) Newick formatted tree string classmethod from_sklearn ( clustering ) Read a tree from sklearn agglomerative clustering Parameters clustering (sklearn object) \u2014 sklearn agglomerative clustering object. Returns (Tree) Tree object generator breadth_first ( ) Generator implementing breadth first search starting at root node generator depth_first ( post_order=True ) Generator implementing depth first search in either post- or pre-order traversel Keyword Arguments: post_order (bool, optional): Depth first search in post-order traversal or not. Defaults to True method layout ( separation=<function equal_separation at 0x1a1d7100e0> , d_x=1.0 , d_y=1.0 , ltr=True ) Calculate (x,y) position of nodes for plotting, modifies nodes in place Parameters separation (function, optional) \u2014 function to calculate separation between leaf nodes. Defaults to equal_separation. d_x (int, optional) \u2014 x-axis distance between neighbouring nodes. Defaults to 1. d_y (int, optional) \u2014 y-axis distance between neighbouring nodes. ltr (bool, optional) \u2014 Left-To-Right layout orientation. Defaults Returns (Tree) Original root node with modified (x,y) coordinates according to specified layout properties","title":"Tree containers"}]}